dataPop$sydist <- syd$sydist[match(dataPop$name,syd$SA2_NAME16)]
dataPop$parradist <- syd$parradist[match(dataPop$name,syd$SA2_NAME16)]
dataPop$logsydist <- log(syd$sydist[match(dataPop$name,syd$SA2_NAME16)])
dataPop$logparradist <- log(syd$parradist[match(dataPop$name,syd$SA2_NAME16)])
median(dataPop$density)
mean(dataPop$density)
plot(dataPop$sydist, dataPop$density, xlab = "Distance from Sydney",
ylab = "Density",main="Scatter plot of Distance vs Density (Raw Data)" , col = "#CC99FF", addRegLine=TRUE)
abline(lm(dataPop$density ~ dataPop$sydist), col="#56B4E9", lwd = 2.5)
plot(dataPop$logsydist, dataPop$trans_density, xlab = "Logged Distance from Sydney",
ylab = "Square root of Density",main="Scatter plot of Distance vs Density" , col = "#56B4E9", addRegLine=TRUE)
abline(lm(dataPop$trans_density ~ dataPop$logsydist), col="#CC99FF", lwd = 2.5)
pop_lm = lm(trans_density ~ logsydist, data = dataPop)
summary(pop_lm)
pop_mlr = lm(trans_density ~ logsydist + yearsince2000, data = dataPop)
summary(pop_mlr)
fit_fixed <- lm(trans_density~yearsince2000*parradist+yearsince2000*sydist,data=dataPop)
summary(fit_fixed)
fit_fixed_norm <- lm(trans_density~yearsince2000*logparradist+yearsince2000*logsydist,data=dataPop)
summary(fit_fixed_norm)
#| -> General sub scripting operator, selects top-level elements.
fit_randint <- lmer(trans_density~yearsince2000*logparradist*logsydist+(1|name),data=dataPop)
summary(fit_randint)
fit_randslope1 <- lmer(trans_density~yearsince2000*parradist*sydist+yearsince2000*parradist*sydist*(year=2020), yearsince2000*parradist*sydist*(year=2021), data=dataPop)
fit_randslope1 <- lmer(trans_density~yearsince2000*parradist*sydist+(yearsince2000|name), data=dataPop)
fit_randslope1 <- lmer(trans_density~yearsince2000*parradist*sydist+(yearsince2000|name), data=dataPop)
summary(fit_randslope1)
x <- c("ggmap", "rgdal", "rgeos", "maptools", "dplyr", "tidyr", "tmap", "sf", "MASS", "rgeos", "gmt", "lme4", "lmerTest", "ggplot2", "sf", "tidyverse", "gganimate")
lapply(x, library, character.only = TRUE)
dataPop = read.csv("C:\Users\viquy\Documents\GitHub\Maths_Project\scripts\datasets\populationLong.csv")
dataPop = read.csv("C:/Users/viquy/Documents/GitHub/Maths_Project/scripts/datasets/populationLong.csv")
dataPop$density <- 0.0
dataPop$density <- dataPop$pop/dataPop$area
dataPop$yearsince2000 <- dataPop$year-2000
syd <- st_read("C:\Users\viquy\Documents\GitHub\Maths_Project\scripts\datasets\SA2_2016_AUST.shp")
syd <- st_read("C:/Users/viquy/Documents/GitHub/Maths_Project/scripts/datasets/SA2_2016_AUST.shp")
greaterSyd <- syd[syd$GCC_NAME16=="Greater Sydney",]
centr <- st_centroid(syd)
centroid_lat <- unlist(lapply(centr$geometry,function(l) l[2]))
centroid_long <- unlist(lapply(centr$geometry,function(l) l[1]))
syd$sydist <- geodist(-33.8688,151.2093,centroid_lat,centroid_long)
syd$parradist <- geodist(-33.8148,151.0017,centroid_lat,centroid_long)
dataPop$sydist <- syd$sydist[match(dataPop$name,syd$SA2_NAME16)]
dataPop$parradist <- syd$parradist[match(dataPop$name,syd$SA2_NAME16)]
dataPop$logsydist <- log(syd$sydist[match(dataPop$name,syd$SA2_NAME16)])
dataPop$logparradist <- log(syd$parradist[match(dataPop$name,syd$SA2_NAME16)])
head(dataPop$sydist)
# Drop SA2's without syddist
df <- df[!is.na(df$sydist),]
# Drop SA2's without syddist
df <- df[!is.na(df$sydist),]
class(df)
# Drop SA2's without syddist
df <- df[!is.na(df$sydist),]
View(dataPop)
dataPop[sydist==NA,]
dataPop[,sydist==NA]
dataPop$sydist == NA
dataPop
x <- c("ggmap", "rgdal", "rgeos", "maptools", "dplyr", "tidyr", "tmap", "sf", "MASS", "rgeos", "gmt", "lme4", "lmerTest", "ggplot2", "sf", "tidyverse", "gganimate")
lapply(x, library, character.only = TRUE)
dataPop = read.csv("C:/Users/viquy/Documents/GitHub/Maths_Project/scripts/datasets/populationLong.csv")
dataPop$density <- 0.0
dataPop$density <- dataPop$pop/dataPop$area
dataPop$yearsince2000 <- dataPop$year-2000
dataPop$trans_density <- sqrt(dataPop$density)
syd <- st_read("C:/Users/viquy/Documents/GitHub/Maths_Project/scripts/datasets/SA2_2016_AUST.shp")
greaterSyd <- syd[syd$GCC_NAME16=="Greater Sydney",]
centr <- st_centroid(syd)
centroid_lat <- unlist(lapply(centr$geometry,function(l) l[2]))
centroid_long <- unlist(lapply(centr$geometry,function(l) l[1]))
# Drop SA2's without syddist
df <- df[!is.na(df$sydist),]
# Drop SA2's without syddist
dataPop <- dataPop[!is.na(dataPop$sydist),]
head(dataPop,5)
tail(dataPop,5)
median(dataPop$trans_density)
mean(dataPop$trans_density)
plot(dataPop$sydist, dataPop$density, xlab = "Distance from Sydney",
ylab = "Density",main="Scatter plot of Distance vs Density (Raw Data)" , col = "#CC99FF", addRegLine=TRUE)
median(dataPop$density)
mean(dataPop$density)
# Drop SA2's without syddist
dataPop <- dataPop[!is.na(dataPop$sydist),]
View(dataPop )
View(dataPop)
syd$sydist <- geodist(-33.8688,151.2093,centroid_lat,centroid_long)
syd$parradist <- geodist(-33.8148,151.0017,centroid_lat,centroid_long)
dataPop$sydist <- syd$sydist[match(dataPop$name,syd$SA2_NAME16)]
dataPop$parradist <- syd$parradist[match(dataPop$name,syd$SA2_NAME16)]
dataPop$logsydist <- log(syd$sydist[match(dataPop$name,syd$SA2_NAME16)])
dataPop$logparradist <- log(syd$parradist[match(dataPop$name,syd$SA2_NAME16)])
head(dataPop$sydist)
head(dataPop,5)
tail(dataPop,5)
median(dataPop$density)
mean(dataPop$density)
median(dataPop$trans_density)
mean(dataPop$trans_density)
plot(dataPop$sydist, dataPop$density, xlab = "Distance from Sydney",
ylab = "Density",main="Scatter plot of Distance vs Density (Raw Data)" , col = "#CC99FF", addRegLine=TRUE)
x <- c("ggmap", "rgdal", "rgeos", "maptools", "dplyr", "tidyr", "tmap", "sf", "MASS", "rgeos", "gmt", "lme4", "lmerTest", "ggplot2", "sf", "tidyverse", "gganimate")
lapply(x, library, character.only = TRUE)
dataPop = read.csv("C:/Users/viquy/Documents/GitHub/Maths_Project/scripts/datasets/populationLong.csv")
dataPop$density <- 0.0
dataPop$density <- dataPop$pop/dataPop$area
dataPop$yearsince2000 <- dataPop$year-2000
dataPop$trans_density <- sqrt(dataPop$density)
syd <- st_read("C:/Users/viquy/Documents/GitHub/Maths_Project/scripts/datasets/SA2_2016_AUST.shp")
greaterSyd <- syd[syd$GCC_NAME16=="Greater Sydney",]
centr <- st_centroid(syd)
centroid_lat <- unlist(lapply(centr$geometry,function(l) l[2]))
centroid_long <- unlist(lapply(centr$geometry,function(l) l[1]))
syd$sydist <- geodist(-33.8688,151.2093,centroid_lat,centroid_long)
syd$parradist <- geodist(-33.8148,151.0017,centroid_lat,centroid_long)
dataPop$sydist <- syd$sydist[match(dataPop$name,syd$SA2_NAME16)]
dataPop$parradist <- syd$parradist[match(dataPop$name,syd$SA2_NAME16)]
dataPop$logsydist <- log(syd$sydist[match(dataPop$name,syd$SA2_NAME16)])
dataPop$logparradist <- log(syd$parradist[match(dataPop$name,syd$SA2_NAME16)])
head(dataPop$sydist)
# Drop SA2's without syddist
# df <- df[!is.na(df$sydist),]
head(dataPop,5)
tail(dataPop,5)
median(dataPop$density)
mean(dataPop$density)
median(dataPop$trans_density)
mean(dataPop$trans_density)
plot(dataPop$sydist, dataPop$density, xlab = "Distance from Sydney",
ylab = "Density",main="Scatter plot of Distance vs Density (Raw Data)" , col = "#CC99FF", addRegLine=TRUE)
abline(lm(dataPop$density ~ dataPop$sydist), col="#56B4E9", lwd = 2.5)
plot(dataPop$logsydist, dataPop$trans_density, xlab = "Logged Distance from Sydney",
ylab = "Square root of Density",main="Scatter plot of Distance vs Density" , col = "#56B4E9", addRegLine=TRUE)
abline(lm(dataPop$trans_density ~ dataPop$logsydist), col="#CC99FF", lwd = 2.5)
pop_lm = lm(trans_density ~ logsydist, data = dataPop)
summary(pop_lm)
pop_mlr = lm(trans_density ~ logsydist + yearsince2000, data = dataPop)
summary(pop_mlr)
fit_fixed <- lm(trans_density~yearsince2000*parradist+yearsince2000*sydist,data=dataPop)
summary(fit_fixed)
fit_fixed_norm <- lm(trans_density~yearsince2000*logparradist+yearsince2000*logsydist,data=dataPop)
summary(fit_fixed_norm)
rand_model_test <- lmer(trans_density~(1|name),data=dataPop)
summary(rand_model_test)
plot(rand_model_test)
#| -> General sub scripting operator, selects top-level elements.
fit_randint <- lmer(trans_density~yearsince2000*logparradist*logsydist+(1|name),data=dataPop)
summary(fit_randint)
plot(fit_randint)
fit_randslope1 <- lmer(trans_density~yearsince2000*parradist*sydist+(yearsince2000|name),data=dataPop)
summary(fit_randslope1)
plot(fit_randslope1)
fit_randslope1$coefficient
fit_randslope1
class(fit_randslope1)
fit_randslope1
coef(fit_randslope1)
head(coef(fit_randslope1))
anova(fit_randint,fit_randslope1)
dataPop$year2020 = (dataPop$yearsince2000 == 20)
dataPop$year2021= (dataPop$yearsince2000 == 21)
model_fit = lmer(trans_density ~ logsydist*logparradist*yearsince2000 + logsydist*logparradist*year2020 +  logsydist*logparradist*year2021 + (1|name),data=dataPop)
plot(model_fit)
summary(model_fit)
dataPop$year2020 = (dataPop$yearsince2000 == 20)
dataPop$year2021= (dataPop$yearsince2000 == 21)
model_fit = lmer(trans_density ~ logsydist*logparradist*yearsince2000 + logsydist*logparradist*year2020 +  logsydist*logparradist*year2021 + (1|name),data=dataPop)
plot(model_fit)
summary(model_fit)
print(model_fit, correlation=TRUE)
#| -> General sub scripting operator, selects top-level elements.
fit_randint <- lmer(trans_density~yearsince2000*logparradist*logsydist+(1|name),data=dataPop)
summary(fit_randint)
plot(fit_randint)
dataPop$year2020 = (dataPop$yearsince2000 == 20)
dataPop$year2021= (dataPop$yearsince2000 == 21)
model_fit = lmer(trans_density ~ logsydist*logparradist*yearsince2000 + logsydist*logparradist*year2020 +  logsydist*logparradist*year2021 + (1|name),data=dataPop)
plot(model_fit)
summary(model_fit)
print(model_fit, correlation=TRUE)
fit_randslope1 <- lmer(trans_density~yearsince2000*parradist*sydist+(yearsince2000|name),data=dataPop)
summary(fit_randslope1)
plot(fit_randslope1)
anova(fit_randint,fit_randslope1) # Random Slope model looks better
anova(fit_randslope1, model_fit)
dataPop$year2020 = (dataPop$yearsince2000 == 20)
dataPop$year2021= (dataPop$yearsince2000 == 21)
model_fit = lmer(trans_density ~ logsydist*logparradist*yearsince2000 + logsydist*logparradist*year2020 +  logsydist*logparradist*year2021 + (1|name),data=dataPop)
plot(model_fit)
summary(model_fit)
r.squaredGLMM(model_fit)
lmer::r.squaredGLMM(model_fit)
lmer4::r.squaredGLMM(model_fit)
x <- c("ggmap", "rgdal", "rgeos", "maptools", "dplyr", "tidyr", "tmap", "sf", "MASS", "rgeos", "gmt", "lme4", "lmerTest", "ggplot2", "sf", "tidyverse", "gganimate")
lapply(x, library, character.only = TRUE)
lme4::r.squaredGLMM(model_fit)
library(broom)
glance(model1) %>%
dplyr::select(adj.r.squared, sigma, AIC, BIC, p.value)
glance(model_fit) %>%
dplyr::select(adj.r.squared, sigma, AIC, BIC, p.value)
?summarize_model
??summarize_model
install.packages("ushr")
library(ushr)
summarize_model(model_fit)
summarize_model(model_fit,ci=FALSE,cor_re=TRUE)
summarize_model(resid(model_fit),ci=FALSE,cor_re=TRUE)
summarize_model(resid(model_fit)) # ,ci=FALSE,cor_re=TRUE
resid(model_fit)
length(resid(model_fit))
summarize_model(ushr(model_fit)) # ,ci=FALSE,cor_re=TRUE
install.packages("MuMIn")
library(MuMIn)
library("MuMIn")
x <- c("ggmap", "rgdal", "rgeos", "maptools", "dplyr", "tidyr", "tmap", "sf", "MASS", "rgeos", "gmt", "lme4", "lmerTest", "ggplot2", "sf", "tidyverse", "gganimate")
lapply(x, library, character.only = TRUE)
dataPop = read.csv("C:/Users/viquy/Documents/GitHub/Maths_Project/scripts/datasets/populationLong.csv")
dataPop = subset(dataPop, select = -c(numChange,perChange) )
dataPop$density <- 0.0
dataPop$density <- dataPop$pop/dataPop$area
dataPop$yearsince2000 <- dataPop$year-2000
dataPop$trans_density <- sqrt(dataPop$density)
centr <- st_centroid(syd)
syd <- st_read("C:/Users/viquy/Documents/GitHub/Maths_Project/scripts/datasets/SA2_2016_AUST.shp")
greaterSyd <- syd[syd$GCC_NAME16=="Greater Sydney",]
head(greaterSyd)
centr <- st_centroid(syd)
centroid_lat <- unlist(lapply(centr$geometry,function(l) l[2]))
centroid_long <- unlist(lapply(centr$geometry,function(l) l[1]))
syd$sydist <- geodist(-33.8688,151.2093,centroid_lat,centroid_long)
syd$parradist <- geodist(-33.8148,151.0017,centroid_lat,centroid_long)
dataPop$sydist <- syd$sydist[match(dataPop$name,syd$SA2_NAME16)]
dataPop$parradist <- syd$parradist[match(dataPop$name,syd$SA2_NAME16)]
dataPop$logsydist <- log(syd$sydist[match(dataPop$name,syd$SA2_NAME16)])
dataPop$logparradist <- log(syd$parradist[match(dataPop$name,syd$SA2_NAME16)])
head(dataPop$sydist)
# Drop SA2's without syddist
dataPop <- dataPop[!is.na(dataPop$logsydist),]
fit_fixed <- lm(trans_density~yearsince2000*parradist+yearsince2000*sydist,data=dataPop)
summary(fit_fixed)
fit_fixed_norm <- lm(trans_density~yearsince2000*logparradist+yearsince2000*logsydist,data=dataPop)
summary(fit_fixed_norm)
rand_model_test <- lmer(trans_density~(1|name),data=dataPop)
summary(rand_model_test)
plot(rand_model_test)
qqnorm(resid(rand_model_test))
qqline(resid(rand_model_test))
#| -> General sub scripting operator, selects top-level elements.
fit_randint <- lmer(trans_density~yearsince2000*logparradist*logsydist+(1|name),data=dataPop)
summary(fit_randint)
plot(fit_randint)
ranEff = ranef(fit_randint)$name
#ranEff
fit_randslope1 <- lmer(trans_density~yearsince2000*parradist*sydist+(yearsince2000|name),data=dataPop)
summary(fit_randslope1)
plot(fit_randslope1)
ranEff = ranef(fit_randslope1)$name
ranEff
anova(fit_randint,fit_randslope1)
dataPop$year2020 = (dataPop$yearsince2000 == 20)
dataPop$year2021= (dataPop$yearsince2000 == 21)
dataPop$year2020
head(dataPop$yearsince2000)
View(dataPop)
dataPop$year2020 = (dataPop$yearsince2000 == 20)
dataPop$year2021= (dataPop$yearsince2000 == 21)
model_fit2 = lmer(trans_density ~ logsydist*logparradist*yearsince2000 + logsydist*logparradist*year2020 +  logsydist*logparradist*year2021 + (yearsince2000|name),data=dataPop)
random_coef = coef(model_fit2)$name
random_coef
#row.names(random_coef)
dataPop$year2020 = (dataPop$yearsince2000 == 20)
dataPop$year2021= (dataPop$yearsince2000 == 21)
model_fit2 = lmer(trans_density ~ logsydist*logparradist*yearsince2000 + logsydist*logparradist*year2020 +  logsydist*logparradist*year2021 + (yearsince2000|name),data=dataPop)
random_coef = coef(model_fit2)$name
random_coef
#row.names(random_coef)
# Run this next: needs sydist and
p <- predict(linear_model,newdata=data.frame(logparradist=c(0,1.609438), logsydist) )
model_fit = lmer(trans_density ~ logsydist*logparradist*yearsince2000 + logsydist*logparradist*year2020 +  logsydist*logparradist*year2021 + (1|name),data=dataPop)
qqnorm(resid(model_fit))
qqline(resid(model_fit))
#plot(model_fit)
#summary(model_fit)
summary(model_fit)
print(model_fit, correlation=TRUE)
random_eff = ranef(model_fit)$name
random_eff
random_coef = coef(model_fit)$name
random_coef
length(syd$SA2_NAME16)
length(unique(syd$SA2_NAME16))
length(dataPop$name)
length(unique(dataPop$name))
length(unique(dataPop$sydist))
fixed_effects = fixef(model_fit)
random_effects =
random_coef %>%
mutate(name = factor(unique(dataPop$name)))
# This is how I want to plot the random slopes
# Pretty sure
dataPop %>%
ggplot(aes(logsydist*logparradist*yearsince2000 + logsydist*logparradist*year2020 +  logsydist*logparradist*year2021, trans_density)) +
geom_point(aes(color = name), alpha = .25) +
geom_abline(
aes(
intercept = fixed_effects['(Intercept)'],
slope = fixed_effects['Name']),
color = 'darkred',
size = 2) +
geom_abline(
aes(
intercept = `(Intercept)`,
slope = logsydist*logparradist*yearsince2000 + logsydist*logparradist*year2020 +  logsydist*logparradist*year2021,
color = name),
size = .5,
alpha = .25,
data = random_eff)
syd$sydist <- geodist(-33.8688,151.2093,centroid_lat,centroid_long)
syd$parradist <- geodist(-33.8148,151.0017,centroid_lat,centroid_long)
dataPop$sydist <- syd$sydist[match(dataPop$name,syd$SA2_NAME16)]
dataPop$parradist <- syd$parradist[match(dataPop$name,syd$SA2_NAME16)]
dataPop$logsydist <- log(syd$sydist[match(dataPop$name,syd$SA2_NAME16)])
dataPop$logparradist <- log(syd$parradist[match(dataPop$name,syd$SA2_NAME16)])
head(dataPop$sydist)
# This is how I want to plot the random slopes
# Pretty sure
dataPop %>%
ggplot(aes(logsydist*logparradist*yearsince2000 + logsydist*logparradist*year2020 +  logsydist*logparradist*year2021, trans_density)) +
geom_point(aes(color = name), alpha = .25) +
geom_abline(
aes(
intercept = fixed_effects['(Intercept)'],
slope = fixed_effects['Name']),
color = 'darkred',
size = 2) +
geom_abline(
aes(
intercept = `(Intercept)`,
slope = logsydist*logparradist*yearsince2000 + logsydist*logparradist*year2020 +  logsydist*logparradist*year2021,
color = name),
size = .5,
alpha = .25,
data = random_eff)
# This is how I want to plot the random slopes
# Pretty sure
dataPop %>%
ggplot(aes(logsydist*logparradist*yearsince2000 + logsydist*logparradist*year2020 +  logsydist*logparradist*year2021, trans_density)) +
geom_point(aes(color = name), alpha = .25) +
geom_abline(
aes(
intercept = fixed_effects['(Intercept)'],
slope = fixed_effects['Name']),
color = 'darkred',
size = 2) +
geom_abline(
aes(
intercept = `(Intercept)`,
slope = logsydist*logparradist*yearsince2000 + logsydist*logparradist*year2020 +  logsydist*logparradist*year2021,
color = name),
size = .5,
alpha = .25,
data = random_eff)
print(model_fit, correlation=TRUE)
summary(model_fit)
summary(model_fit)
# Slight alterations to visualise
# Pretty sure
ggplot(data = dataPop, mapping = aes(logsydist*logparradist*yearsince2000 + logsydist*logparradist*year2020 +  logsydist*logparradist*year2021, trans_density)) +
geom_point(aes(color = name), alpha = .25) +
geom_abline(
aes(
intercept = fixed_effects['(Intercept)'],
slope = fixed_effects['Name']),
color = 'darkred',
size = 2) +
geom_abline(
aes(
intercept = `(Intercept)`,
slope = logsydist*logparradist*yearsince2000 + logsydist*logparradist*year2020 +  logsydist*logparradist*year2021,
color = name),
size = .5,
alpha = .25,
data = random_eff)
names(dataPop)
# Slight alterations to visualise
# Pretty sure
ggplot(data = dataPop, mapping = aes(x = logsydist*logparradist*yearsince2000 + logsydist*logparradist*year2020 +  logsydist*logparradist*year2021, y = trans_density)) +
geom_point(aes(color = name), alpha = .25) +
geom_abline(
aes(
intercept = fixed_effects['(Intercept)'],
slope = fixed_effects['Name']),
color = 'darkred',
size = 2) +
geom_abline(
aes(
intercept = `(Intercept)`,
slope = logsydist*logparradist*yearsince2000 + logsydist*logparradist*year2020 +  logsydist*logparradist*year2021,
color = name),
size = .5,
alpha = .25,
data = random_eff)
model_lm = lm(trans_density ~ logsydist + yearsince2000, data = dataPop)
gpa_lm_by_group0 = lmList(trans_density ~ yearsince2000 | name, dataPop)
gpa_lm_by_group  = coef(gpa_lm_by_group0)
gint =
data_frame(Mixed=coef(model_fit)$name[,1], Separate=gpa_lm_by_group[,1]) %>%
gather(key=Model, value=Intercept) %>%
ggplot(aes(x=Intercept)) +
geom_density(aes(color=Model, fill=Model), alpha=.25) +
scale_color_viridis_d(begin = .25, end = .75) +
scale_fill_viridis_d(begin = .25, end = .75) +
ggtitle('Intercepts') +
labs(x='', y='') +
xlim(c(1.5,4)) +
theme_minimal() +
theme(
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
legend.key.size=unit(2, 'mm'),
legend.title=element_text(size=8),
legend.text=element_text(size=8),
legend.box.spacing=unit(0, 'in'),
legend.position=c(.85,.75)
)
gslopes =
data_frame(Mixed=coef(gpa_mixed)$student[,2], Separate=gpa_lm_by_group[,2]) %>%
gather(key=Model, value=Occasion) %>%
ggplot(aes(x=Occasion)) +
geom_density(aes(color=Model, fill=Model), alpha=.25, show.legend=F) +
scale_color_viridis_d(begin = .25, end = .75) +
scale_fill_viridis_d(begin = .25, end = .75) +
ggtitle('Slopes for occasion') +
labs(x='', y='') +
xlim(c(-.2,.4)) +
theme_minimal() +
theme(
axis.text.y = element_blank(),
axis.ticks.y = element_blank()
)
# Slight alterations to visualise
# Pretty sure
ggplot(data = dataPop, mapping = aes(x = logsydist*logparradist*yearsince2000 + logsydist*logparradist*year2020 +  logsydist*logparradist*year2021, y = trans_density)) +
geom_point(aes(color = name), alpha = .25) +
geom_abline(
aes(
intercept = fixed_effects['(Intercept)'],
slope = fixed_effects['Name']),
color = 'darkred',
size = 2) +
geom_abline(
aes(
intercept = `(Intercept)`,
slope = logsydist*logparradist*yearsince2000 + logsydist*logparradist*year2020 +  logsydist*logparradist*year2021,
color = name),
size = .5,
alpha = .25,
data = random_eff)
ranEff = ranef(fit_randslope1)$name
ranEff
factor(unique(dataPop$name))
unique(dataPop$name)
length(unique(dataPop$name))
length(factor(unique(dataPop$name)))
fixed_effects = fixef(model_fit)
random_effects =
random_coef %>%
mutate(name = factor(unique(dataPop$name)))
# This is how I want to plot the random slopes
# Pretty sure
dataPop %>%
ggplot(aes(logsydist*logparradist*yearsince2000 + logsydist*logparradist*year2020 +  logsydist*logparradist*year2021, trans_density)) +
geom_point(aes(color = name), alpha = .25) +
geom_abline(
aes(
intercept = fixed_effects['(Intercept)'],
slope = fixed_effects['Name']),
color = 'darkred',
size = 2) +
geom_abline(
aes(
intercept = `(Intercept)`,
slope = logsydist*logparradist*yearsince2000 + logsydist*logparradist*year2020 +  logsydist*logparradist*year2021,
color = name),
size = .5,
alpha = .25,
data = random_eff)
fixed_effects = fixef(model_fit)
random_effects =
random_coef %>%
mutate(name = factor(unique(dataPop$name)))
# This is how I want to plot the random slopes
# Pretty sure
dataPop %>%
ggplot(aes(logsydist*logparradist*yearsince2000 + logsydist*logparradist*year2020 +  logsydist*logparradist*year2021, trans_density)) +
geom_point(aes(color = name), alpha = .25) +
geom_abline(
aes(
intercept = fixed_effects['(Intercept)'],
slope = fixed_effects['Name']),
color = 'darkred',
size = 2) +
geom_abline(
aes(
intercept = `(Intercept)`,
slope = logsydist*logparradist*yearsince2000 + logsydist*logparradist*year2020 +  logsydist*logparradist*year2021,
color = name),
size = .5,
alpha = .25,
data = random_eff)
