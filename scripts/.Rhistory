# GAussian kernel smooth weights
wt <- function(d,w) {
exp(-0.5*(d/w)^2)
}
setwd("C:/Users/Owner/OneDrive - Western Sydney University/Spring 2022/Mathematics Project/")
getwd()
load("RIME_REGION_22112016094642536.csv")
#load("")
load("Russell Data.csv")
source("Russell Data.csv")
data = read.csv("C:/Users/Owner/OneDrive - Western Sydney University/Spring 2022/Mathematics Project/Russell Data.csv")
head(data,4)
data2 = df[1:4843,]
# head(data,4)
data2 = df[1:4843,]
head(data,4)
4842/9
data2 = df[1:4843,]
head(data2,4)
data2.tail(4)
data2 = df[1:4843,]
head(data2,4)
#data2.tail(4)
data2 = df[1:4843,]
head(data,4)
#data2.tail(4)
data2 = df[1:4843,]
head(data,4)
data.tail(4)
data2 = df[1:4843,]
head(data,4)
#data.tail(4)
data2 = data[1:4843,]
head(data2,4)
#data.tail(4)
data2 = data[1:4843,]
head(data2,4)
data2.tail(4)
data2 = data[1:4843,]
head(data2,4)
tail(data2, n = 4)
dataNSW = data[1:4842,]
head(dataNSW,4)
tail(dataNSW, n = 4)
library(ggmap)
install.packages(ggmap)
library(ggmap)
library("ggmap")
install.packages("ggmap")
locs <- c('65 Bellbird Crescent, Blaxland')
geocode(locs)
#install.packages("ggmap")
library("ggmap")
#install.packages("ggmap")
library(ggmap)
#install.packages("ggmap")
library(RgoogleMaps)
#install.packages("ggmap")
library("ggmap")
#install.packages("ggmap")
library("ggplot2")
library("ggmap")
install.packages("ggmap")
#install.packages("ggmap")
library("ggplot2")
library("ggmap")
locs <- c('65 Bellbird Crescent, Blaxland')
geocode(locs)
#install.packages("ggmap")
library("ggplot2")
library("ggmap")
register_google(key = "[AIzaSyBjhrvJWZjeccwf12spG2zPZYlKDXhDiUM]")
locs <- c('65 Bellbird Crescent, Blaxland')
geocode(locs)
#install.packages("ggmap")
library("ggplot2")
library("ggmap")
register_google(key = "[AIzaSyBjhrvJWZjeccwf12spG2zPZYlKDXhDiUM]")
locs <- c('65 Bellbird Crescent, Blaxland')
geocode(locs)
#install.packages("ggmap")
library("ggplot2")
library("ggmap")
register_google(key = "[AIzaSyBjhrvJWZjeccwf12spG2zPZYlKDXhDiUM]")
#locs <- c('65 Bellbird Crescent, Blaxland')
#geocode(locs)
#install.packages("ggmap")
library("ggplot2")
library("ggmap")
register_google(key = "[AIzaSyBjhrvJWZjeccwf12spG2zPZYlKDXhDiUM]")
#locs <- c('65 Bellbird Crescent, Blaxland')
#geocode(locs)
#install.packages("ggmap")
library("ggplot2")
library("ggmap")
register_google(key = "[AIzaSyBjhrvJWZjeccwf12spG2zPZYlKDXhDiUM]")
locs <- c('65 Bellbird Crescent, Blaxland')
#geocode(locs)
#install.packages("ggmap")
library("ggplot2")
library("ggmap")
register_google(key = "[AIzaSyBjhrvJWZjeccwf12spG2zPZYlKDXhDiUM]")
locs <- c('65 Bellbird Crescent, Blaxland')
geocode(locs)
#install.packages("ggmap")
library("ggplot2")
library("ggmap")
register_google(key = "[AIzaSyCqxVoUpMXi4a_277_Omdia34tjThcRP8A]")
locs <- c('65 Bellbird Crescent, Blaxland')
geocode(locs)
#install.packages("ggmap")
library("ggplot2")
library("ggmap")
register_google(key = "AIzaSyCqxVoUpMXi4a_277_Omdia34tjThcRP8A")
locs <- c('65 Bellbird Crescent, Blaxland')
geocode(locs)
#install.packages("ggmap")
library("ggplot2")
library("ggmap")
register_google(key = "AIzaSyCqxVoUpMXi4a_277_Omdia34tjThcRP8A")
locs <- c('Blaxland, NSW')
geocode(locs)
#install.packages("ggmap")
library("ggplot2")
library("ggmap")
register_google(key = "AIzaSyCqxVoUpMXi4a_277_Omdia34tjThcRP8A")
locs <- c('Sydney, NSW')
geocode(locs)
#install.packages("ggmap")
library("ggplot2")
library("ggmap")
register_google(key = "AIzaSyCqxVoUpMXi4a_277_Omdia34tjThcRP8A")
locs <- c('Blaxland, NSW')
geocode(locs)
#install.packages("ggmap")
library("ggplot2")
library("ggmap")
register_google(key = "AIzaSyCqxVoUpMXi4a_277_Omdia34tjThcRP8A")
locs <- c('Sydney, NSW')
geocode(locs)
library("igraph")
library("rtweet")
plot(c(120.1,45.2,	20.5,	18.8,	16.3,	15.8))
library(tidyr)
library(MASS)
library(sf)
library(rgeos)
install.packages("rgeos")
install.packages("sf")
library(tidyr)
library(MASS)
library(sf)
library(rgeos)
library(gmt)
install.packages(gmt)
install.packages("gmt")
library(lme4)
library(gmt)
library(lmerTest)
install.packages("lmerTest")
library(ggplot2)
library("geosphere")
install.packages("geosphere")
setwd("~/GitHub/Maths_Project/R Scripts")
dt <- read.csv("32180DS0001_2001-21_Analysis.csv",skip=6)
library(tidyr)
library(MASS)
library(sf)
library(rgeos)
library(gmt)
library(lme4)
library(lmerTest)
library(ggplot2)
dt <- read.csv("32180DS0001_2001-21_Analysis.csv",skip=6)
dt <- dt[-1:-2,]
dt$SA2 <- dt$X.9
dt <- dt[,c("SA2","Area",paste0("X",2001:2021))]
dtlong <- dt %>% gather(year,pop,paste0("X",2001:2021))
dtlong$year <- as.numeric(gsub("X","",dtlong$year))
dtlong$pop <- as.numeric(dtlong$pop)
dtlong$Area <- as.numeric(dtlong$Area)
dtlong$density <- dtlong$pop/dtlong$Area
dtlong$yearsince2000 <- dtlong$year-2000
x <- c("ggmap", "rgdal", "rgeos", "maptools", "dplyr", "tidyr", "tmap", "sf", "MASS", "rgeos", "gmt", "lme4", "lmerTest", "ggplot2", "sf", "tidyverse", "gganimate")
lapply(x, library, character.only = TRUE)
dataPop$trans_density <- sqrt(dataPop$density)
x <- c("ggmap", "rgdal", "rgeos", "maptools", "dplyr", "tidyr", "tmap", "sf", "MASS", "rgeos", "gmt", "lme4", "lmerTest", "ggplot2", "sf", "tidyverse", "gganimate")
lapply(x, library, character.only = TRUE)
library("geosphere")
library("ggplot2")
library("ggmap")
library("tidyr")
library("ggplot2")
library('MASS')
library("sf")
library("rgeos")
library("gmt")
library("lme4")
library("lmerTest")
df = read.csv("C:/Users/viquy/Documents/GitHub/Maths_Project/scripts/datasets/32180DS0001_2001-21.xlsx")
head(df,5)
df = read.csv("C:/Users/viquy/Documents/GitHub/Maths_Project/scripts/datasets/32180DS0001_2001-21.xlsx")
head(df,5)
x <- c("ggmap", "rgdal", "rgeos", "maptools", "dplyr", "tidyr", "tmap", "sf", "MASS", "rgeos", "gmt", "lme4", "lmerTest", "ggplot2", "sf", "tidyverse", "gganimate")
lapply(x, library, character.only = TRUE)
dataPop = read.csv("C:/Users/viquy/Documents/GitHub/Maths_Project/scripts/datasets/populationLong.csv")
dataPop$density <- 0.0
dataPop$density <- dataPop$pop/dataPop$area
dataPop$yearsince2000 <- dataPop$year-2000
dataPop$trans_density <- sqrt(dataPop$density)
syd <- st_read("C:/Users/viquy/Documents/GitHub/Maths_Project/scripts/datasets/SA2_2016_AUST.shp")
greaterSyd <- syd[syd$GCC_NAME16=="Greater Sydney",]
centr <- st_centroid(syd)
centroid_lat <- unlist(lapply(centr$geometry,function(l) l[2]))
centroid_long <- unlist(lapply(centr$geometry,function(l) l[1]))
syd$sydist <- geodist(-33.8688,151.2093,centroid_lat,centroid_long)
syd$parradist <- geodist(-33.8148,151.0017,centroid_lat,centroid_long)
dataPop$sydist <- syd$sydist[match(dataPop$name,syd$SA2_NAME16)]
dataPop$parradist <- syd$parradist[match(dataPop$name,syd$SA2_NAME16)]
dataPop$logsydist <- log(syd$sydist[match(dataPop$name,syd$SA2_NAME16)])
dataPop$logparradist <- log(syd$parradist[match(dataPop$name,syd$SA2_NAME16)])
head(dataPop,5)
tail(dataPop,5)
median(dataPop$density)
mean(dataPop$density)
median(dataPop$trans_density)
mean(dataPop$trans_density)
plot(dataPop$sydist, dataPop$density, xlab = "Distance from Sydney",
ylab = "Density",main="Scatter plot of Distance vs Density (Raw Data)" , col = "#CC99FF", addRegLine=TRUE)
abline(lm(dataPop$density ~ dataPop$sydist), col="#56B4E9", lwd = 2.5)
plot(dataPop$logsydist, dataPop$trans_density, xlab = "Logged Distance from Sydney",
ylab = "Square root of Density",main="Scatter plot of Distance vs Density" , col = "#56B4E9", addRegLine=TRUE)
abline(lm(dataPop$trans_density ~ dataPop$logsydist), col="#CC99FF", lwd = 2.5)
pop_lm = lm(trans_density ~ logsydist, data = dataPop)
summary(pop_lm)
pop_mlr = lm(trans_density ~ logsydist + yearsince2000, data = dataPop)
summary(pop_mlr)
fit_fixed <- lm(trans_density~yearsince2000*parradist+yearsince2000*sydist,data=dataPop)
summary(fit_fixed)
fit_fixed_norm <- lm(trans_density~yearsince2000*logparradist+yearsince2000*logsydist,data=dataPop)
summary(fit_fixed_norm)
#| -> General sub scripting operator, selects top-level elements.
fit_randint <- lmer(trans_density~yearsince2000*logparradist*logsydist+(1|name),data=dataPop)
summary(fit_randint)
fit_randslope1 <- lmer(trans_density~yearsince2000*parradist*sydist+(yearsince2000|name),data=dataPop)
summary(fit_randslope1)
anova(fit_randint,fit_randslope1)
names(dataPop)
head(dataPop)
fit_randslope2 <- lmer(trans_density~yearsince2000*parradist*sydist+yearsince2000*parradist*sydist*(year=2020), yearsince2000*parradist*sydist*(year=2021), data=dataPop)
x <- c("ggmap", "rgdal", "rgeos", "maptools", "dplyr", "tidyr", "tmap", "sf", "MASS", "rgeos", "gmt", "lme4", "lmerTest", "ggplot2", "sf", "tidyverse", "gganimate")
lapply(x, library, character.only = TRUE)
fit_randslope1 <- lmer(trans_density~yearsince2000*parradist*sydist+yearsince2000*parradist*sydist*(year=2020), yearsince2000*parradist*sydist*(year=2021), data=dataPop)
x <- c("ggmap", "rgdal", "rgeos", "maptools", "dplyr", "tidyr", "tmap", "sf", "MASS", "rgeos", "gmt", "lme4", "lmerTest", "ggplot2", "sf", "tidyverse", "gganimate")
lapply(x, library, character.only = TRUE)
dataPop = read.csv("C:/Users/viquy/Documents/GitHub/Maths_Project/scripts/datasets/populationLong.csv")
dataPop$density <- 0.0
dataPop$density <- dataPop$pop/dataPop$area
dataPop$yearsince2000 <- dataPop$year-2000
dataPop$trans_density <- sqrt(dataPop$density)
syd <- st_read("C:/Users/viquy/Documents/GitHub/Maths_Project/scripts/datasets/SA2_2016_AUST.shp")
greaterSyd <- syd[syd$GCC_NAME16=="Greater Sydney",]
centr <- st_centroid(syd)
centroid_lat <- unlist(lapply(centr$geometry,function(l) l[2]))
centroid_long <- unlist(lapply(centr$geometry,function(l) l[1]))
syd$sydist <- geodist(-33.8688,151.2093,centroid_lat,centroid_long)
syd$parradist <- geodist(-33.8148,151.0017,centroid_lat,centroid_long)
dataPop$sydist <- syd$sydist[match(dataPop$name,syd$SA2_NAME16)]
dataPop$parradist <- syd$parradist[match(dataPop$name,syd$SA2_NAME16)]
dataPop$logsydist <- log(syd$sydist[match(dataPop$name,syd$SA2_NAME16)])
dataPop$logparradist <- log(syd$parradist[match(dataPop$name,syd$SA2_NAME16)])
head(dataPop,5)
tail(dataPop,5)
bc <- boxcox(lm(density~yearsince2000*parradist+yearsince2000*sydist,data=dtlong[dtlong$density>0,]))
x <- c("ggmap", "rgdal", "rgeos", "maptools", "dplyr", "tidyr", "tmap", "sf", "MASS", "rgeos", "gmt", "lme4", "lmerTest", "ggplot2", "sf", "tidyverse", "gganimate")
lapply(x, library, character.only = TRUE)
dataPop = read.csv("C:/Users/viquy/Documents/GitHub/Maths_Project/scripts/datasets/populationLong.csv")
dataPop$density <- 0.0
dataPop$density <- dataPop$pop/dataPop$area
dataPop$yearsince2000 <- dataPop$year-2000
dataPop$trans_density <- sqrt(dataPop$density)
syd <- st_read("C:/Users/viquy/Documents/GitHub/Maths_Project/scripts/datasets/SA2_2016_AUST.shp")
greaterSyd <- syd[syd$GCC_NAME16=="Greater Sydney",]
centr <- st_centroid(syd)
x <- c("ggmap", "rgdal", "rgeos", "maptools", "dplyr", "tidyr", "tmap", "sf", "MASS", "rgeos", "gmt", "lme4", "lmerTest", "ggplot2", "sf", "tidyverse", "gganimate")
lapply(x, library, character.only = TRUE)
dataPop = read.csv("C:/Users/viquy/Documents/GitHub/Maths_Project/scripts/datasets/populationLong.csv")
dataPop$density <- 0.0
dataPop$density <- dataPop$pop/dataPop$area
dataPop$yearsince2000 <- dataPop$year-2000
dataPop$trans_density <- sqrt(dataPop$density)
syd <- st_read("C:/Users/viquy/Documents/GitHub/Maths_Project/scripts/datasets/SA2_2016_AUST.shp")
plot(dataPop$sydist, dataPop$density, xlab = "Distance from Sydney",
ylab = "Density",main="Scatter plot of Distance vs Density (Raw Data)" , col = "#CC99FF", addRegLine=TRUE)
syd$sydist <- geodist(-33.8688,151.2093,centroid_lat,centroid_long)
syd$parradist <- geodist(-33.8148,151.0017,centroid_lat,centroid_long)
dataPop$sydist <- syd$sydist[match(dataPop$name,syd$SA2_NAME16)]
dataPop$parradist <- syd$parradist[match(dataPop$name,syd$SA2_NAME16)]
dataPop$logsydist <- log(syd$sydist[match(dataPop$name,syd$SA2_NAME16)])
dataPop$logparradist <- log(syd$parradist[match(dataPop$name,syd$SA2_NAME16)])
median(dataPop$density)
mean(dataPop$density)
plot(dataPop$sydist, dataPop$density, xlab = "Distance from Sydney",
ylab = "Density",main="Scatter plot of Distance vs Density (Raw Data)" , col = "#CC99FF", addRegLine=TRUE)
abline(lm(dataPop$density ~ dataPop$sydist), col="#56B4E9", lwd = 2.5)
plot(dataPop$logsydist, dataPop$trans_density, xlab = "Logged Distance from Sydney",
ylab = "Square root of Density",main="Scatter plot of Distance vs Density" , col = "#56B4E9", addRegLine=TRUE)
abline(lm(dataPop$trans_density ~ dataPop$logsydist), col="#CC99FF", lwd = 2.5)
pop_lm = lm(trans_density ~ logsydist, data = dataPop)
summary(pop_lm)
pop_mlr = lm(trans_density ~ logsydist + yearsince2000, data = dataPop)
summary(pop_mlr)
fit_fixed <- lm(trans_density~yearsince2000*parradist+yearsince2000*sydist,data=dataPop)
summary(fit_fixed)
fit_fixed_norm <- lm(trans_density~yearsince2000*logparradist+yearsince2000*logsydist,data=dataPop)
summary(fit_fixed_norm)
#| -> General sub scripting operator, selects top-level elements.
fit_randint <- lmer(trans_density~yearsince2000*logparradist*logsydist+(1|name),data=dataPop)
summary(fit_randint)
fit_randslope1 <- lmer(trans_density~yearsince2000*parradist*sydist+yearsince2000*parradist*sydist*(year=2020), yearsince2000*parradist*sydist*(year=2021), data=dataPop)
fit_randslope1 <- lmer(trans_density~yearsince2000*parradist*sydist+(yearsince2000|name), data=dataPop)
fit_randslope1 <- lmer(trans_density~yearsince2000*parradist*sydist+(yearsince2000|name), data=dataPop)
summary(fit_randslope1)
x <- c("ggmap", "rgdal", "rgeos", "maptools", "dplyr", "tidyr", "tmap", "sf", "MASS", "rgeos", "gmt", "lme4", "lmerTest", "ggplot2", "sf", "tidyverse", "gganimate")
lapply(x, library, character.only = TRUE)
dataPop = read.csv("C:\Users\viquy\Documents\GitHub\Maths_Project\scripts\datasets\populationLong.csv")
dataPop = read.csv("C:/Users/viquy/Documents/GitHub/Maths_Project/scripts/datasets/populationLong.csv")
dataPop$density <- 0.0
dataPop$density <- dataPop$pop/dataPop$area
dataPop$yearsince2000 <- dataPop$year-2000
syd <- st_read("C:\Users\viquy\Documents\GitHub\Maths_Project\scripts\datasets\SA2_2016_AUST.shp")
syd <- st_read("C:/Users/viquy/Documents/GitHub/Maths_Project/scripts/datasets/SA2_2016_AUST.shp")
greaterSyd <- syd[syd$GCC_NAME16=="Greater Sydney",]
centr <- st_centroid(syd)
centroid_lat <- unlist(lapply(centr$geometry,function(l) l[2]))
centroid_long <- unlist(lapply(centr$geometry,function(l) l[1]))
syd$sydist <- geodist(-33.8688,151.2093,centroid_lat,centroid_long)
syd$parradist <- geodist(-33.8148,151.0017,centroid_lat,centroid_long)
dataPop$sydist <- syd$sydist[match(dataPop$name,syd$SA2_NAME16)]
dataPop$parradist <- syd$parradist[match(dataPop$name,syd$SA2_NAME16)]
dataPop$logsydist <- log(syd$sydist[match(dataPop$name,syd$SA2_NAME16)])
dataPop$logparradist <- log(syd$parradist[match(dataPop$name,syd$SA2_NAME16)])
head(dataPop$sydist)
# Drop SA2's without syddist
df <- df[!is.na(df$sydist),]
# Drop SA2's without syddist
df <- df[!is.na(df$sydist),]
class(df)
# Drop SA2's without syddist
df <- df[!is.na(df$sydist),]
View(dataPop)
dataPop[sydist==NA,]
dataPop[,sydist==NA]
dataPop$sydist == NA
dataPop
x <- c("ggmap", "rgdal", "rgeos", "maptools", "dplyr", "tidyr", "tmap", "sf", "MASS", "rgeos", "gmt", "lme4", "lmerTest", "ggplot2", "sf", "tidyverse", "gganimate")
lapply(x, library, character.only = TRUE)
dataPop = read.csv("C:/Users/viquy/Documents/GitHub/Maths_Project/scripts/datasets/populationLong.csv")
dataPop$density <- 0.0
dataPop$density <- dataPop$pop/dataPop$area
dataPop$yearsince2000 <- dataPop$year-2000
dataPop$trans_density <- sqrt(dataPop$density)
syd <- st_read("C:/Users/viquy/Documents/GitHub/Maths_Project/scripts/datasets/SA2_2016_AUST.shp")
greaterSyd <- syd[syd$GCC_NAME16=="Greater Sydney",]
centr <- st_centroid(syd)
centroid_lat <- unlist(lapply(centr$geometry,function(l) l[2]))
centroid_long <- unlist(lapply(centr$geometry,function(l) l[1]))
# Drop SA2's without syddist
df <- df[!is.na(df$sydist),]
# Drop SA2's without syddist
dataPop <- dataPop[!is.na(dataPop$sydist),]
head(dataPop,5)
tail(dataPop,5)
median(dataPop$trans_density)
mean(dataPop$trans_density)
plot(dataPop$sydist, dataPop$density, xlab = "Distance from Sydney",
ylab = "Density",main="Scatter plot of Distance vs Density (Raw Data)" , col = "#CC99FF", addRegLine=TRUE)
median(dataPop$density)
mean(dataPop$density)
# Drop SA2's without syddist
dataPop <- dataPop[!is.na(dataPop$sydist),]
View(dataPop )
View(dataPop)
syd$sydist <- geodist(-33.8688,151.2093,centroid_lat,centroid_long)
syd$parradist <- geodist(-33.8148,151.0017,centroid_lat,centroid_long)
dataPop$sydist <- syd$sydist[match(dataPop$name,syd$SA2_NAME16)]
dataPop$parradist <- syd$parradist[match(dataPop$name,syd$SA2_NAME16)]
dataPop$logsydist <- log(syd$sydist[match(dataPop$name,syd$SA2_NAME16)])
dataPop$logparradist <- log(syd$parradist[match(dataPop$name,syd$SA2_NAME16)])
head(dataPop$sydist)
head(dataPop,5)
tail(dataPop,5)
median(dataPop$density)
mean(dataPop$density)
median(dataPop$trans_density)
mean(dataPop$trans_density)
plot(dataPop$sydist, dataPop$density, xlab = "Distance from Sydney",
ylab = "Density",main="Scatter plot of Distance vs Density (Raw Data)" , col = "#CC99FF", addRegLine=TRUE)
x <- c("ggmap", "rgdal", "rgeos", "maptools", "dplyr", "tidyr", "tmap", "sf", "MASS", "rgeos", "gmt", "lme4", "lmerTest", "ggplot2", "sf", "tidyverse", "gganimate")
lapply(x, library, character.only = TRUE)
dataPop = read.csv("C:/Users/viquy/Documents/GitHub/Maths_Project/scripts/datasets/populationLong.csv")
dataPop$density <- 0.0
dataPop$density <- dataPop$pop/dataPop$area
dataPop$yearsince2000 <- dataPop$year-2000
dataPop$trans_density <- sqrt(dataPop$density)
syd <- st_read("C:/Users/viquy/Documents/GitHub/Maths_Project/scripts/datasets/SA2_2016_AUST.shp")
greaterSyd <- syd[syd$GCC_NAME16=="Greater Sydney",]
centr <- st_centroid(syd)
centroid_lat <- unlist(lapply(centr$geometry,function(l) l[2]))
centroid_long <- unlist(lapply(centr$geometry,function(l) l[1]))
syd$sydist <- geodist(-33.8688,151.2093,centroid_lat,centroid_long)
syd$parradist <- geodist(-33.8148,151.0017,centroid_lat,centroid_long)
dataPop$sydist <- syd$sydist[match(dataPop$name,syd$SA2_NAME16)]
dataPop$parradist <- syd$parradist[match(dataPop$name,syd$SA2_NAME16)]
dataPop$logsydist <- log(syd$sydist[match(dataPop$name,syd$SA2_NAME16)])
dataPop$logparradist <- log(syd$parradist[match(dataPop$name,syd$SA2_NAME16)])
head(dataPop$sydist)
# Drop SA2's without syddist
# df <- df[!is.na(df$sydist),]
head(dataPop,5)
tail(dataPop,5)
median(dataPop$density)
mean(dataPop$density)
median(dataPop$trans_density)
mean(dataPop$trans_density)
plot(dataPop$sydist, dataPop$density, xlab = "Distance from Sydney",
ylab = "Density",main="Scatter plot of Distance vs Density (Raw Data)" , col = "#CC99FF", addRegLine=TRUE)
abline(lm(dataPop$density ~ dataPop$sydist), col="#56B4E9", lwd = 2.5)
plot(dataPop$logsydist, dataPop$trans_density, xlab = "Logged Distance from Sydney",
ylab = "Square root of Density",main="Scatter plot of Distance vs Density" , col = "#56B4E9", addRegLine=TRUE)
abline(lm(dataPop$trans_density ~ dataPop$logsydist), col="#CC99FF", lwd = 2.5)
pop_lm = lm(trans_density ~ logsydist, data = dataPop)
summary(pop_lm)
pop_mlr = lm(trans_density ~ logsydist + yearsince2000, data = dataPop)
summary(pop_mlr)
fit_fixed <- lm(trans_density~yearsince2000*parradist+yearsince2000*sydist,data=dataPop)
summary(fit_fixed)
fit_fixed_norm <- lm(trans_density~yearsince2000*logparradist+yearsince2000*logsydist,data=dataPop)
summary(fit_fixed_norm)
rand_model_test <- lmer(trans_density~(1|name),data=dataPop)
summary(rand_model_test)
plot(rand_model_test)
#| -> General sub scripting operator, selects top-level elements.
fit_randint <- lmer(trans_density~yearsince2000*logparradist*logsydist+(1|name),data=dataPop)
summary(fit_randint)
plot(fit_randint)
fit_randslope1 <- lmer(trans_density~yearsince2000*parradist*sydist+(yearsince2000|name),data=dataPop)
summary(fit_randslope1)
plot(fit_randslope1)
fit_randslope1$coefficient
fit_randslope1
class(fit_randslope1)
fit_randslope1
coef(fit_randslope1)
head(coef(fit_randslope1))
anova(fit_randint,fit_randslope1)
dataPop$year2020 = (dataPop$yearsince2000 == 20)
dataPop$year2021= (dataPop$yearsince2000 == 21)
model_fit = lmer(trans_density ~ logsydist*logparradist*yearsince2000 + logsydist*logparradist*year2020 +  logsydist*logparradist*year2021 + (1|name),data=dataPop)
plot(model_fit)
summary(model_fit)
dataPop$year2020 = (dataPop$yearsince2000 == 20)
dataPop$year2021= (dataPop$yearsince2000 == 21)
model_fit = lmer(trans_density ~ logsydist*logparradist*yearsince2000 + logsydist*logparradist*year2020 +  logsydist*logparradist*year2021 + (1|name),data=dataPop)
plot(model_fit)
summary(model_fit)
print(model_fit, correlation=TRUE)
#| -> General sub scripting operator, selects top-level elements.
fit_randint <- lmer(trans_density~yearsince2000*logparradist*logsydist+(1|name),data=dataPop)
summary(fit_randint)
plot(fit_randint)
dataPop$year2020 = (dataPop$yearsince2000 == 20)
dataPop$year2021= (dataPop$yearsince2000 == 21)
model_fit = lmer(trans_density ~ logsydist*logparradist*yearsince2000 + logsydist*logparradist*year2020 +  logsydist*logparradist*year2021 + (1|name),data=dataPop)
plot(model_fit)
summary(model_fit)
print(model_fit, correlation=TRUE)
fit_randslope1 <- lmer(trans_density~yearsince2000*parradist*sydist+(yearsince2000|name),data=dataPop)
summary(fit_randslope1)
plot(fit_randslope1)
anova(fit_randint,fit_randslope1) # Random Slope model looks better
anova(fit_randslope1, model_fit)
dataPop$year2020 = (dataPop$yearsince2000 == 20)
dataPop$year2021= (dataPop$yearsince2000 == 21)
model_fit = lmer(trans_density ~ logsydist*logparradist*yearsince2000 + logsydist*logparradist*year2020 +  logsydist*logparradist*year2021 + (1|name),data=dataPop)
plot(model_fit)
summary(model_fit)
r.squaredGLMM(model_fit)
lmer::r.squaredGLMM(model_fit)
lmer4::r.squaredGLMM(model_fit)
x <- c("ggmap", "rgdal", "rgeos", "maptools", "dplyr", "tidyr", "tmap", "sf", "MASS", "rgeos", "gmt", "lme4", "lmerTest", "ggplot2", "sf", "tidyverse", "gganimate")
lapply(x, library, character.only = TRUE)
lme4::r.squaredGLMM(model_fit)
library(broom)
glance(model1) %>%
dplyr::select(adj.r.squared, sigma, AIC, BIC, p.value)
glance(model_fit) %>%
dplyr::select(adj.r.squared, sigma, AIC, BIC, p.value)
?summarize_model
??summarize_model
install.packages("ushr")
library(ushr)
summarize_model(model_fit)
summarize_model(model_fit,ci=FALSE,cor_re=TRUE)
summarize_model(resid(model_fit),ci=FALSE,cor_re=TRUE)
summarize_model(resid(model_fit)) # ,ci=FALSE,cor_re=TRUE
resid(model_fit)
length(resid(model_fit))
summarize_model(ushr(model_fit)) # ,ci=FALSE,cor_re=TRUE
install.packages("MuMIn")
library(MuMIn)
library("MuMIn")
