3.0,3.4,3.0,2.8,3.0,3.3,3.2,2.9,3.1,3.1)
petal = c(0.2,0.2,0.2,0.2,0.3,0.4,0.1,0.2,0.3,0.3,
1.3,1.1,1.3,1.3,1.2,1.3,1.2,1.2,1.4,1.2,
1.8,2.3,2.0,1.9,2.3,2.5,2.3,1.9,2.1,2.4)
flower = data.frame(species, sepal, petal)
outcome = cbind(flower$petal, flower$sepal)
ma1 <‐ manova(outcome~flower$species, data = flower)
ma1 = manova(outcome~flower$species, data = flower)
summary(ma1, intercept = TRUE)
data = read.csv(file.choose())
data
data = read.csv(file.choose())
data
data_boot = c(21, 19, 24, 31, 29, 29, 21, 15, 27, 23, 38, 31, 30, 26, 14)
mean(data_boot)
b = 20000
boot.dist = rep(NA, b)
for (i in 1:b) {
boot.dist[i]= mean(sample(data$Conduc,6, replace=TRUE))
}
b = 20000
boot.dist = rep(NA, b)
for (i in 1:b) {
boot.dist[i]= mean(sample(data$Conduc,6, replace=TRUE))
}
b = 20000
boot.dist = rep(NA, b)
for (i in 1:b) {
boot.dist[i]= mean(sample(data_boot,6, replace=TRUE))
}
hist(boot.dist)
b = 20000
boot.dist = rep(NA, b)
for (i in 1:b) {
boot.dist[i]= mean(sample(data_boot,15, replace=TRUE))
}
hist(boot.dist)
lower = round(mean(boot.dist) - 2*sd(boot.dist),2)
upper = round(mean(boot.dist)+2*sd(boot.dist),2)
cat(lower, "and", upper)
b = 10000
boot.dist = rep(NA, b)
for (i in 1:b) {
boot.dist[i]= mean(sample(data_boot,15, replace=TRUE))
}
hist(boot.dist)
outcome - cbind(data$Freshwater, data$Marine)
outcome = cbind(data$Freshwater, data$Marine)
ma1 = manova(outcome~data$Origin, data = data)
summary(ma1, intercept = TRUE)
DFA = lda(Origin ~ Freshwater + Marine, data = data)
library(MASS)
library(MASS)
DFA = lda(Origin ~ Freshwater + Marine, data = data)
fish = data.frame(Freshwater=120, Marine=435)
predict(DFA, newdata=fish)
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
ggplot2::map_data()
mpg
?mpg
#Creating a ggplot
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg)
# Exercises
# 1. Run ggplot(data = mpg). What do you see?
ggplot(data = mpg)
# Brief description of the data
?mpg
mtcars
?mtcars
?mpg
ggplot(data = mpg) +
geom_point(mapping = aes(x = hwy, y = cyl))
ggplot(data = mpg) +
geom_point(mapping = aes(x = class, y = drv))
ggplot(data = mpg) +
geom_point(mapping = aes(x = class, y = drv))
library(tidyverse)
ggplot(data = mpg) +
geom_point(
mapping = aes(x = displ, y = hwy, colour = "blue")
)
#2) Which variables are categorical and which are continuous?
?mpg
# Continuous
# displ, cty, hwy
mpg
#2) Which variables are categorical and which are continuous?
?mpg
# 3)
ggplot(data = mpg) +
geom_point(mapping = aes(x = manufacturer, y =year), colour = "blue")
ggplot(data = mpg) +
geom_point(mapping = aes(x = manufacturer, y =displ), colour = "green")
ggplot(data = mpg) +
geom_point(mapping = aes(x = model, y =displ), colour = "green")
ggplot(data = mpg) +
geom_point(mapping = aes(x = class, y =displ), colour = "green")
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y =displ), colour = "blue")
# 5) What does the stroke aesthetic do? What shapes does it work with?
?geom_point
?stroke
ggplot(mtcars, aes(wt, mpg)) +
geom_point(shape = 21, colour = "black", fill = "white", size = 5, stroke = 5)
ggplot(mtcars, aes(wt, mpg)) +
geom_point(shape = 21, colour = "black", fill = "white", size = 5)
ggplot(mtcars, aes(wt, mpg)) +
geom_point(shape = 21, colour = "black", fill = "white", size = 5, stroke = 5)
ggplot(mtcars, aes(wt, mpg)) +
geom_point(shape = 21, colour = "black", fill = "white", size = 5, stroke = 15)
ggplot(mtcars, aes(wt, mpg)) +
geom_point(shape = 21, colour = "black", fill = "white", size = 5, stroke = 1)
ggplot(mtcars, aes(wt, mpg)) +
geom_point(shape = 21, colour = "black", fill = "white", size = 5, stroke = 2)
ggplot(data = mpg) +
geom_point(mapping = aes(colour = displ < 5))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, colour = displ < 5))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class, nrow =2)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(drv ~ cyl)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ displ, nrow =2)
ggplot(data = mpg) +
geom_point(mapping = aes(x = drv, y = cyl))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(. ~ cyl)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(drv ~ .)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(drv ~ .)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(. ~ cyl)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(drv ~ .)
#
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(. ~ cyl)
# 4) Take the first faceted plot in this section:
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class, nrow = 2)
# 4) Take the first faceted plot in this section:
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class, nrow = 3)
# 4) Take the first faceted plot in this section:
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class, nrow = 2)
# 4) Take the first faceted plot in this section:
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class, nrow = 5)
# 4) Take the first faceted plot in this section:
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class, nrow = 44)
# 4) Take the first faceted plot in this section:
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class, nrow = 2)
# 4) Take the first faceted plot in this section:
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class, nrow = 3)
# 4) Take the first faceted plot in this section:
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class, nrow = 6)
# 4) Take the first faceted plot in this section:
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class, nrow = 2)
# 5) Read ?facet_wrap. What does nrow do? What does ncol do?
?facet_wrap
# 6) When using facet_grid() you should usually put the variable with more unique levels in the columns. Why?
?facet_grid()
install.packages("tidyverse")
library(tidyverse)
mpg
# Brief description of the data
?mpg
# Creating a ggplot
# This plot compares displ (Cars engine size in litres) with
# hwy (cars fuel efficiency)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
# Exercises
# 1) Run ggplot(data = mpg). What do you see?
ggplot(data = mpg)
?mtcars
?mpg
ggplot(data = mpg) +
geom_point(mapping = aes(x = hwy, y = cyl))
ggplot(data = mpg) +
geom_point(mapping = aes(x = class, y = drv))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, colour = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y =hwy, size = class))
#alpha
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y =hwy, alpha = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y =hwy, shape = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y =hwy), colour = "blue")
ggplot(data = mpg) +
geom_point(
mapping = aes(x = displ, y = hwy, colour = "blue")
)
#2) Which variables are categorical and which are continuous?
?mpg
# Continuous
# displ, cty, hwy
mpg
# 3)
ggplot(data = mpg) +
geom_point(mapping = aes(x = manufacturer, y =year), colour = "blue")
ggplot(data = mpg) +
geom_point(mapping = aes(x = class, y =displ), colour = "green")
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y =displ), colour = "blue")
# 5) What does the stroke aesthetic do? What shapes does it work with?
?geom_point
ggplot(mtcars, aes(wt, mpg)) +
geom_point(shape = 21, colour = "black", fill = "white", size = 5, stroke = 2)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, colour = displ < 5))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class, nrow =2)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(drv ~ cyl)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ displ, nrow =2)
ggplot(data = mpg) +
geom_point(mapping = aes(x = drv, y = cyl))
# Displ against hwy in three plots for drv.
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(drv ~ .)
# Four columns, one for each of the different cylinder sizes.
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(. ~ cyl)
# 4) Take the first faceted plot in this section:
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class, nrow = 2)
# 5) Read ?facet_wrap. What does nrow do? What does ncol do?
?facet_wrap
# 6) When using facet_grid() you should usually put the variable with more unique levels in the columns. Why?
?facet_grid()
?geom
?geom()
ggplt(
data = mpg,
mapping = aes(x= despl, y = hey, color = drv)
) +
geom_point() +
geom_smooth(se = FALSE)
ggplot(
data = mpg,
mapping = aes(x= despl, y = hey, color = drv)
) +
geom_point() +
geom_smooth(se = FALSE)
ggplot(
data = mpg,
mapping = aes(x= displ, y = hwy, color = drv)
) +
geom_point() +
geom_smooth(se = FALSE)
?geom_smooth()
# Plot 1
ggplot(data = mpg, mapping = aes(x = displ, y = hey)) +
geom_point() +
geom_smooth()
# Plot 1
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point() +
geom_smooth()
# Plot 2
ggplot() +
geom_point(
data = mpg,
mapping = aes(x = displ, y = hwy)
) +
geom_smooth(
data = mpg,
mapping = aes(x = displ, y = hwy)
)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy))
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point()
?geom_point
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(size =3)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(size = 7)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(size = 7) +
geom_smooth(se = FALSE)
# Plot 2
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, group = drv)) +
geom_point(size = 7) +
geom_smooth(se = FALSE)
# Plot 3
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, group = drv)) +
geom_point(size = 7, mapping = aes(color = drv)) +
geom_smooth(se = FALSE)
# Plot 3
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, group = drv)) +
geom_point(size = 7, mapping = aes(color = drv)) +
geom_smooth(se = FALSE, mapping = aes(colour = drv))
# Plot 4
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(size = 7, mapping = aes(color = drv)) +
geom_smooth(se = FALSE, mapping = aes(colour = drv))
# Plot 4
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, group = drv)) +
geom_point(size = 7, mapping = aes(color = drv)) +
geom_smooth(se = FALSE, mapping = aes(colour = drv))
# Plot 2
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, group = drv)) +
geom_point(size = 7) +
geom_smooth(se = FALSE)
# Plot 1
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(size = 7) +
geom_smooth(se = FALSE)
# Plot 4
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, group = drv)) +
geom_point(size = 7, mapping = aes(color = drv)) +
geom_smooth(se = FALSE)
# Plot 1
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(size = 7) +
geom_smooth(se = FALSE)
# Plot 2
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, group = drv)) +
geom_point(size = 7) +
geom_smooth(se = FALSE)
# Plot 1
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(size = 7) +
geom_smooth(se = FALSE)
# Plot 4
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(size = 7, mapping = aes(color = drv)) +
geom_smooth(se = FALSE)
# 6) Create the 6 graphs displayed in the textbooks.
?geom_point
?ggplot2-specs
# GAussian kernel smooth weights
wt <- function(d,w) {
exp(-0.5*(d/w)^2)
}
setwd("C:/Users/Owner/OneDrive - Western Sydney University/Spring 2022/Mathematics Project/")
getwd()
load("RIME_REGION_22112016094642536.csv")
#load("")
load("Russell Data.csv")
source("Russell Data.csv")
data = read.csv("C:/Users/Owner/OneDrive - Western Sydney University/Spring 2022/Mathematics Project/Russell Data.csv")
head(data,4)
data2 = df[1:4843,]
# head(data,4)
data2 = df[1:4843,]
head(data,4)
4842/9
data2 = df[1:4843,]
head(data2,4)
data2.tail(4)
data2 = df[1:4843,]
head(data2,4)
#data2.tail(4)
data2 = df[1:4843,]
head(data,4)
#data2.tail(4)
data2 = df[1:4843,]
head(data,4)
data.tail(4)
data2 = df[1:4843,]
head(data,4)
#data.tail(4)
data2 = data[1:4843,]
head(data2,4)
#data.tail(4)
data2 = data[1:4843,]
head(data2,4)
data2.tail(4)
data2 = data[1:4843,]
head(data2,4)
tail(data2, n = 4)
dataNSW = data[1:4842,]
head(dataNSW,4)
tail(dataNSW, n = 4)
library(ggmap)
install.packages(ggmap)
library(ggmap)
library("ggmap")
install.packages("ggmap")
locs <- c('65 Bellbird Crescent, Blaxland')
geocode(locs)
#install.packages("ggmap")
library("ggmap")
#install.packages("ggmap")
library(ggmap)
#install.packages("ggmap")
library(RgoogleMaps)
#install.packages("ggmap")
library("ggmap")
#install.packages("ggmap")
library("ggplot2")
library("ggmap")
install.packages("ggmap")
#install.packages("ggmap")
library("ggplot2")
library("ggmap")
locs <- c('65 Bellbird Crescent, Blaxland')
geocode(locs)
#install.packages("ggmap")
library("ggplot2")
library("ggmap")
register_google(key = "[AIzaSyBjhrvJWZjeccwf12spG2zPZYlKDXhDiUM]")
locs <- c('65 Bellbird Crescent, Blaxland')
geocode(locs)
#install.packages("ggmap")
library("ggplot2")
library("ggmap")
register_google(key = "[AIzaSyBjhrvJWZjeccwf12spG2zPZYlKDXhDiUM]")
locs <- c('65 Bellbird Crescent, Blaxland')
geocode(locs)
#install.packages("ggmap")
library("ggplot2")
library("ggmap")
register_google(key = "[AIzaSyBjhrvJWZjeccwf12spG2zPZYlKDXhDiUM]")
#locs <- c('65 Bellbird Crescent, Blaxland')
#geocode(locs)
#install.packages("ggmap")
library("ggplot2")
library("ggmap")
register_google(key = "[AIzaSyBjhrvJWZjeccwf12spG2zPZYlKDXhDiUM]")
#locs <- c('65 Bellbird Crescent, Blaxland')
#geocode(locs)
#install.packages("ggmap")
library("ggplot2")
library("ggmap")
register_google(key = "[AIzaSyBjhrvJWZjeccwf12spG2zPZYlKDXhDiUM]")
locs <- c('65 Bellbird Crescent, Blaxland')
#geocode(locs)
#install.packages("ggmap")
library("ggplot2")
library("ggmap")
register_google(key = "[AIzaSyBjhrvJWZjeccwf12spG2zPZYlKDXhDiUM]")
locs <- c('65 Bellbird Crescent, Blaxland')
geocode(locs)
#install.packages("ggmap")
library("ggplot2")
library("ggmap")
register_google(key = "[AIzaSyCqxVoUpMXi4a_277_Omdia34tjThcRP8A]")
locs <- c('65 Bellbird Crescent, Blaxland')
geocode(locs)
#install.packages("ggmap")
library("ggplot2")
library("ggmap")
register_google(key = "AIzaSyCqxVoUpMXi4a_277_Omdia34tjThcRP8A")
locs <- c('65 Bellbird Crescent, Blaxland')
geocode(locs)
#install.packages("ggmap")
library("ggplot2")
library("ggmap")
register_google(key = "AIzaSyCqxVoUpMXi4a_277_Omdia34tjThcRP8A")
locs <- c('Blaxland, NSW')
geocode(locs)
#install.packages("ggmap")
library("ggplot2")
library("ggmap")
register_google(key = "AIzaSyCqxVoUpMXi4a_277_Omdia34tjThcRP8A")
locs <- c('Sydney, NSW')
geocode(locs)
#install.packages("ggmap")
library("ggplot2")
library("ggmap")
register_google(key = "AIzaSyCqxVoUpMXi4a_277_Omdia34tjThcRP8A")
locs <- c('Blaxland, NSW')
geocode(locs)
#install.packages("ggmap")
library("ggplot2")
library("ggmap")
register_google(key = "AIzaSyCqxVoUpMXi4a_277_Omdia34tjThcRP8A")
locs <- c('Sydney, NSW')
geocode(locs)
